<!doctype html public "-//W3C//DTD HTML 4.0 //EN">
<html>
<head>
    <META HTTP-EQUIV="Pragma" CONTENT="no-cache">
    <META HTTP-EQUIV="Cache-Control" CONTENT="no-cache">

    <title>LIQUIDACIONES: PROCESO</title>
</head>
    <body bgcolor="#fffff7" link="#000000" alink="#ff0000" vlink="#000000" text="#000000" style="PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FONT-SIZE: 11px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; magin: 0; spacing: 0" bottommargin="0" nowrap leftmargin="0" topmargin="17" rightmargin="0" marginwidth="0" marginheight="0">

<style type="text/css">
<!--
.head1 {background: #CC9933; height:22px; color: #FFFFFF; font-size: 11pt; font-weight: 500=medium; text-align: center}
.sub1 {background: #C8B588; height:22px; color: #FFFFFF; font-size: 11pt; font-weight: 500=medium; text-align: center}
.data1 {background: #EEEECC}
.data2 {background: #CCCCCC}
.data1p {background: #EEEECC; font-size: 11pt}
.data2p {background: #CCCCCC; font-size: 11pt}
/*printer friendly styles*/
.border {border: solid 1px #CCCCCC}
.TLB {border: solid 1px #CCCCCC; border-right: none}
.TB {border-top:  solid 1px #CCCCCC; border-bottom:  solid 1px #CCCCCC}
.TRB {border: solid 1px #CCCCCC; border-left: none}
.T {border-top: solid 1px #CCCCCC}
.L {border-left: solid 1px #CCCCCC}
.B {border-bottom: solid 1px #CCCCCC}
.LR {border-left: solid 1px #CCCCCC; {border-right: solid 1px #CCCCCC}
.LB {border-left: solid 1px #CCCCCC; {border-bottom: solid 1px #CCCCCC}
.LRB {border: solid 1px #CCCCCC; border-top: none}

/* End of style section. Generated by AceHTML at 16/08/03 10:14:34 */
-->
</style>
<table width="100%" align="center">
<tr>
    <td align="center">
<?php
/** Proceso de Liquidacion
*   @Crea   fah  Feb 18/04
*   @Rev    fah  Abr/06/04
*   @Rev    fah  Jun/08/04
*   @Rev    fah  JUl/14/04
*   @Rev    fah  oCT/08/04  procesos de contabilizacion de liqudaciones
**/

//header("Content-Type: text/plain");
define("RelativePath", "..");
//include_once('baaGrid.php');
include_once("adodb.inc.php");
include_once("tohtml.inc.php");
include_once("../Common.php");
include_once("GenUti.inc.php");

//include_once("../LibPhp/SegLib.php");
include_once("LiLiPr_func.inc.php");
include_once("../LibPhp/ConTranLib.php");

/** Aplicación de un Lote de Liquidación, Recibe como via GET el Año, Semana, Nro de proceso y la instrucción
*   WHERE de la consulta requerida para seleccionar las tarjas.
*   Para cada registro encontrado, se actualiza el campo LiqProceso.
*   @param  $db             Object      ByRef, Conexion a la base de datos
*/
function fAplicaProc(&$db)   {
    global $ilAno;
	global $ilSemana;
	global $ilNumProces;
    $slSql= "SELECT  distinct tad_NumTarja, tad_Secuencia, tac_Embarcador, IFNULL(tad_LiqNumero,0) as tad_LiqNumero,
                     concat(left(per_Apellidos,12), ' ', left(per_nombres,12)) as txt_Nombre
                FROM liqembarques  JOIN liqtarjacabec ON tac_RefOperativa = emb_RefOperativa
                                     JOIN conpersonas ON per_CodAuxiliar = tac_Embarcador
                                     JOIN liqtarjadetal ON tad_NumTarja = tar_NumTarja
                                     JOIN genparametros ON par_clave = 'IMARCA' and par_secuencia = tad_CodMarca
                 WHERE emb_AnoOperacion = " . $ilAno . "  AND " . $ilSemana .
                      " BETWEEN emb_SemInicio AND emb_SemTermino  AND tad_LiqProceso=0 ";
error_log ("Paso 1", 3, "/tmp/aaa-errors.log");

    $slCond =str_replace('|', '=', fGetParam("pQry", ""));
    $slSql .= $slCond . " Order by txt_Nombre, tad_NumTarja, tad_Secuencia";
    $db->SetFetchMode(ADODB_FETCH_BOTH);
    $result = $db->Execute($slSql);
    $ilUltimoProd = false;
    $ilLiqSecue = NZ(fDBValor($db, 'liqsecuencias', 'ID'));//               Analiza la secuencia y decide utilizar el sigte numero usado o el generado
    $ilMaxNumLiq = NZ(fDBValor($db, 'liqtarjadetal', 'MAX(tad_LiqNumero)'),0);
    if ($ilLiqSecue > $ilMaxNumLiq) {
        $ilMaxNumLiq += 1;
        $db->Execute("UPDATE liqsecuencias SET ID = ". $ilMaxNumLiq .  " WHERE ID <> 0");
    }
error_log ("Paso 2", 3, "/tmp/aaa-errors.log");
    if ($result) {
error_log ("Paso 3\n", 3, "/tmp/aaa-errors.log");
        while (!$result->EOF )   {
error_log ("Paso 4", 3, "/tmp/aaa-errors.log");
            if($ilUltimoProd != $result->fields['tac_Embarcador']) {                // Para cada Nuevo productor, Nuevo Numero de Liquidacion
               $ilLiqNumero = ($result->fields['tad_LiqNumero'] == 0) ? $db->GenID('liqsecuencias') : $result->fields['tad_LiqNumero'] == 0;
               $ilUltimoProd = $result->fields['tac_Embarcador'];
            }
            if (!is_numeric($ilLiqNumero)) fErrorPage('','NO SE PUEDE DEFINIR LA SECUENCIA DE LIQUIDACIONES', true, false);
//       	echo " " .$result->fields['tad_LiqNumero'] . " - " . $result->fields['tad_Secuencia'] . "&nbsp;&nbsp;&nbsp;&nbsp; ";
          	$slSql = "UPDATE liqtarjadetal
                         SET tad_LiqProceso  = " . $ilNumProces . ",
                              tad_LiqNumero = " . $ilLiqNumero .
      	                 " WHERE tad_NumTarja = ".$result->fields['tad_NumTarja'] . " AND
      	                         tad_Secuencia = ".$result->fields[1];
            if (!$db->Execute($slSql)) fErrorPage('','NO SE PUDO ASIGNAR LAS SECUENCIAS DE LIQUIDACIONES EN TARJAS', true, false);
           	$result->MoveNext();  	
        }
error_log ("\n", 3, "/tmp/aaa-errors.log");
    }
    else
         fErrorPage('','NO EXISTE TARJAS PARA EL CRITERIO DEFINIDO', true, false);
}
/**
*   Elimina Registrs de Detalle de INventario, según datos enviados en un arreglo
* 	@access public
*   @param  variant $conn         Referencia a una Conexión ya establecida
*   @param  array   $record       Arreglo que contiene los valores a insertar, con indide = nombre del campo
* 	@return bool                  Resultado de la inserción
*/
function fDelDetalleInv(&$conn, $Where)
 {
    $sql = "DELETE FROM invdetalle WHERE " . $Where;
    $rs = $conn->Execute($sql);
    return ($conn->Execute($sql));
}
/**
*   Generar una tabla temporal con los datos del  tarjas que intervienen en el proceso
* 	@access public
*   @param  string  $db             Referencia a la coneccion
*   @param  string  $ilNumproces    Número de proceso
* 	@return void
*/
function fSelDatosProc(&$db, $ilNumProces, $ilProductor=false)
{
    $db->SetFetchMode(ADODB_FETCH_BOTH);
    if (!$db->Execute("DROP TABLE IF EXISTS tmp_liqdetal"))      fErrorPage('','NO SE PUDO LIMPIAR DATOS TEMPORALES', true, false);
    $slSql = "CREATE  temporary table tmp_liqdetal
                SELECT d.*, c.tac_Embarcador,
                        tad_CantRecibida - tad_CantRechazada   AS tad_CantEmbarcada,
                        tac_RefOperativa, tac_Fecha, tac_Semana,
                        tad_CantCaidas AS TCAJCAID,
                        tad_CantRechazada AS TCAJRECH,
                        tad_ValUnitario   AS TVALUNIT,
                        ABS(tad_DifUnitario)   AS TADEUNIT,
                        tad_CodCompon1    AS TCODCART
                FROM   ((liqtarjadetal  d JOIN liqtarjacabec c ON c.tar_NumTarja = d.tad_NumTarja)
                       JOIN liqembarques e ON e.emb_RefOperativa = c.tac_RefOperativa)
                WHERE tad_liqproceso = " . $ilNumProces . " AND
                       (tad_CantRecibida + tad_CantRechazada + tad_CantCaidas) <> 0 ";
    if ($ilProductor) $slSql .= " AND tac_Embarcador = " . $ilProductor;
    if (!$db->Execute($slSql))      fErrorPage('','NO SE PUDO GENERAR DATOS TEMPORALES', true, false);
//                                  Limpieza y regeneracion de tablas temporales utilizadas en calculos
    if(!$db->Execute("DROP TABLE IF EXISTS tmp_saldoinv")) fErrorPage('','NO SE PUDO ELIMINAR SALDOS PREVIOS DE INVENTARIO', true);
    if(!$db->Execute("DROP TABLE IF EXISTS tmp_product")) fErrorPage('','NO SE PUDO ELIMINAR LISTA PREVIA DE PRODUCTORES', true);
    if(!$db->Execute("CREATE TEMPORARY TABLE tmp_product ".
                     "(tmp_Codproductor INTEGER(10) KEY, tmp_LiqNumero INTEGER(10) , INDEX k1 (tmp_CodProductor))"))
                     fErrorPage('','NO SE PUDO CREAR LISTA DE PRODUCTORES', true);
//                                  Tabla temp con resumen de productores y Nro de liquidacion
    if(!$db->Execute("INSERT INTO tmp_product ".
                     "SELECT DISTINCT tac_Embarcador as tmp_CodProductor, tad_LiqNumero as tmp_LiqNumero ".
                     "FROM tmp_liqdetal")) fErrorPage('','NO SE PUDO GENERAR LISTA DE PRODUCTORES', true) ;
}

/**
*   Obtener un recordset del detalle de tarjas ampliado con dosis para generar explosion de insumos
* 	@access public
*   @param  string  $db             Referencia a la coneccion
*   @param  string  $ilNumproces    Número de proceso
* 	@return objeto                  Recordset conteniendo el resultado de la consulta
*/
function &fSelExplosion(&$db, $ilNumProces)
{
    $slSel =  "SELECT tac_Embarcador, tad_NumTarja, tad_Secuencia, tad_CantRecibida, tad_CantRechazada, ".
                     "tac_RefOperativa, tac_Fecha, tac_Semana, tad_LiqNumero, ".
                     "TCAJCAID, TCAJRECH, TVALUNIT, TADEUNIT, TCODCART, " .
                    "tad_CantCaidas, tad_CantEmbarcada, dos_CodItem,  dos_Cantidad, " .
                    "(tad_CantRecibida - tad_CantRechazada) * dos_Cantidad as tad_Embarc, " .
                    "act_UniMedida, (tad_CantRechazada) * dos_Cantidad as tad_Rechaz, (tad_CantCaidas) * dos_Cantidad as tad_Caidas " .
                    "FROM (tmp_liqdetal ";

    $slSql = $slSel .
                "LEFT JOIN liqdosis ON dos_CodComponente = tad_CodCompon1)  LEFT JOIN conactivos ON act_CodAuxiliar = dos_CodItem " .
             " UNION ". $slSel .
                "LEFT JOIN liqdosis pla ON pla.dos_CodComponente = tad_CodCompon2)  LEFT JOIN conactivos ON act_CodAuxiliar = dos_CodItem " .
             " UNION ". $slSel .
                "LEFT JOIN liqdosis mat  on  mat.dos_CodComponente = tad_CodCompon3) LEFT JOIN conactivos ON act_CodAuxiliar = dos_CodItem " .
             " UNION ". $slSel .
                "LEFT JOIN liqdosis etq  on  etq.dos_CodComponente = tad_CodCompon4) LEFT JOIN conactivos ON act_CodAuxiliar = dos_CodItem  ORDER BY 1,2 ";
    $db->SetFetchMode(ADODB_FETCH_BOTH);
    $result = $db->Execute($slSql);
    if (!$result) fErrorPage('','NO SE PUDO OBTENER DETALLE DE TARJAS PARA EXPLOSION DE INVENTARIO', true,false);
//  Retornar el recorset del detalle de tarjas utilizado en todo el proceso
    return $result;
}
/**
*   Obtener un recordset del detalle de tarjas para procesar las liquidaciones
* 	@access public
*   @param  string  $db             Referencia a la coneccion
*   @param  string  $ilNumproces    Número de proceso
* 	@return objeto                  Recordset conteniendo el resultado de la consulta
*   @rev    fah Jul/14/04           No se procesa el detalle de tarjas, sino el resumen por productor en la semana
*/
function &fSelLiquidacion(&$db, $ilNumProces)
{
    $slSql =  "SELECT tac_Embarcador, 0 AS tad_NumTarja, 0 AS tad_Secuencia,
                      0 as tac_RefOperativa, tac_Semana, tad_LiqNumero,
                      SUM(tad_CantRecibida) AS tad_CantRecibida,
                      SUM(tad_CantRechazada) AS tad_CantRechazada,
                      SUM(TCAJCAID) AS TCAJCAID, SUM(TCAJRECH) AS TCAJRECH,
                      SUM(0) AS TVALUNIT,
                      SUM(0) AS TADEUNIT,
                      SUM(tad_CantCaidas) AS tad_CantCaidas,
                      SUM(tad_CantEmbarcada) AS tad_CantEmbarcada,
                      SUM(ROUND(tad_CantEmbarcada * tad_ValUnitario,2)) as PVALOFIC,
                      SUM(ROUND(tad_CantEmbarcada * IF(tad_DifUnitario >= 0, tad_DifUnitario, 0),2)) as PDIFPREC,
                      SUM(ROUND(tad_CantEmbarcada * IF(tad_DifUnitario < 0, tad_DifUnitario* (-1), 0),2)) as PBONPREC
                FROM tmp_liqdetal
                GROUP BY 1,2,3,4,5,6
                ORDER BY 1,2,3, 4,5,6 ";
    $db->SetFetchMode(ADODB_FETCH_BOTH);
    $result = $db->Execute($slSql);
    if (!$result) fErrorPage('','NO SE PUDO OBTENER RESUMEN  DE TARJAS', true,false);
    return $result;
}

/**
*   Procesa las Tarjas que corresponden al nuemro de proceso. Graba la explosión de insumos
* 	@access public
*   @param  object  $db       Ref. a la conexion
*   @param  object  $result   Resultado de la selecciòn de tarjas
*   @param  date    $dlFecCierre    Fecha de Cierre de liquidaciòn
*   @param  integer $ilSemana       Semana correspondiente
*   @param  integer $ilNumProceso   Nùmero de proceso a ejecutar
* 	@return void
*/
function fProcesaTarjas(&$db, &$result, $dlFecCierre, $ilSemana, $ilNumProces,  $ilPeriodo) {
    global $slUsuario ;
    $ilRegNum_em = false;
    $ilRegNum_rz = false;
    $ilRegNum_ca = false;
    $ilNumTarj = -1;
    $alDetalle = array();
//
    if ($result) {
//        echo "PROCESADO: <br>";
//        echo "<tr style='font-size:9px'><td>";
        $flTotReci=0;
        $flTotRech=0;
        $flTotCaid=0;
        $flTotEmba=0;
        while (!$result->EOF )
        {
        	if ($ilNumTarj != $result->fields['tad_NumTarja']) {
        	   $slSel = "SUM(tad_cantrecibida) AS tot_recibidas,
                        SUM(tad_cantrechazada) AS tot_rechazadas,
                        SUM(tad_cantcaidas) as tot_caidas,
                        SUM(tad_CantRecibida + tad_CantRechazada + tad_CantCaidas) AS tot_embarcado";
//              Totales recibido, rechazado y embarcado por cada tarja (para evaluaciones)
                list($flTotReci, $flTotRech, $flTotCaid, $flTotEmba) = fDbValor($db,  'liqtarjadetal', $slSel, 'tad_numtarja = ' . $result->fields['tad_NumTarja']);
        	    $ilSecEm = 1;
        	    $ilSecRz = 1;
        	    $ilSecCa = 1;
        	    $ilRegNum_em = false;
                $ilRegNum_rz = false;
                $ilRegNum_ca = false;
//                echo "</td></tr><tr tr style='font-size:11px'><td width='80'>" .
//                                    $result->fields['tac_Embarcador'] . " - " . $result->fields['tad_NumTarja'] . "   : " .
//                                     "</td><td>";
                if ($flTotEmba <> 0) {
                    fAgregaComprobante($db, 'LE', $result->fields['tad_NumTarja'], 0, $dlFecCierre, $dlFecCierre, $dlFecCierre,
                                        29, $result->fields['tac_Embarcador'], '.' ,
                                        'Embarque Sem ' . $ilSemana . ", " . $result->fields['tad_CantEmbarcada']. " cjs",
                                        0, 1, 0, 0, $ilSemana, 5, 1, $ilNumProces,
                                        593, $slUsuario, $ilPeriodo, date("Y-m-d"));
                     $ilRegNum_em = $db->Insert_ID();
                }
                if ($flTotRech <> 0) {
                    fAgregaComprobante($db, 'LR', $result->fields['tad_NumTarja'], 0, $dlFecCierre, $dlFecCierre, $dlFecCierre,
                                    29, $result->fields['tac_Embarcador'], '.' ,
                                    'Rechazo Sem ' . $ilSemana . ", " . $result->fields['tad_CantRechazada']. " cjs",
                                    0, 1, 0, 0, $ilSemana, 5, 1, $ilNumProces,
                                    593, $slUsuario, $ilPeriodo, date("Y-m-d"));
                    $ilRegNum_rz = $db->Insert_ID();
                }
                if (NZ($flTotCaid) <> 0) {
                    fAgregaComprobante($db, 'LC', $result->fields['tad_NumTarja'], 0, $dlFecCierre, $dlFecCierre, $dlFecCierre,
                                    29, $result->fields['tac_Embarcador'], '.' ,
                                    'Cjas Caidas  Sem ' . $ilSemana . ", " . $result->fields['tad_CantCaidas']. " cjs" ,
                                    0, 1, 0, 0, $ilSemana, 5, 1, $ilNumProces,
                                    593, $slUsuario, $ilPeriodo, date("Y-m-d"));
                    $ilRegNum_ca = $db->Insert_ID();
                }
                $ilNumTarj = $result->fields['tad_NumTarja'];
            }
            if (!is_null($result->fields['dos_CodItem'] )) {
                $flPrecUnit = NZ(fDBValor($db, 'invprecios', 'pre_preUnitario', 'pre_CodItem = ' . $result->fields['dos_CodItem'] . ' AND pre_LisPrecios = 3'));
//              if ($flPrecUnit == 0)  fErrorPage('','NO SE HA DEFINIDO PRECIO DE LIQUIDACION PARA EL ITEM   ' . $result->fields['dos_CodItem'] , true);
                if ($flPrecUnit == 0)  echo 'NO SE HA DEFINIDO PRECIO DE LIQUIDACION PARA EL ITEM &nbsp;&nbsp;' . $result->fields['dos_CodItem']. '<br>';
                if($ilRegNum_em && $flTotEmba <> 0)  {
                  $alDetalle['det_RegNumero']     = $ilRegNum_em;
                  $alDetalle['det_Secuencia']     = $ilSecEm++;
                  $alDetalle['det_CodItem']       = $result->fields['dos_CodItem'];
                  $alDetalle['det_CanDespachada'] = $result->fields['tad_Embarc'];
                  $alDetalle['det_UniMedida']     = $result->fields['act_UniMedida'];
                  $alDetalle['det_CantEquivale']  = $result->fields['tad_Embarc'];
                  $alDetalle['det_CosTotal']      = 0;   // REv
                  $alDetalle['det_ValTotal']      = round($result->fields['tad_Embarc'] * $flPrecUnit,2);   //REv
                  $alDetalle['det_RefOperativa']  = 0;
                  $alDetalle['det_Estado']        = 1;
                  $alDetalle['det_CosUnitario']   = 0;
                  $alDetalle['det_ValUnitario']   = $flPrecUnit;
                  $alDetalle['det_Destino']       = 0;
                  fInsDetalleInv($db, $alDetalle);
                }
                if($ilRegNum_rz && $flTotRech <> 0) {
                  $alDetalle['det_RegNumero']     = $ilRegNum_rz;
                  $alDetalle['det_Secuencia']     = $ilSecRz++;
                  $alDetalle['det_CodItem']       = $result->fields['dos_CodItem'];
                  $alDetalle['det_CanDespachada'] = $result->fields['tad_Rechaz'];
                  $alDetalle['det_UniMedida']     = $result->fields['act_UniMedida'];
                  $alDetalle['det_CantEquivale']  = $result->fields['tad_Rechaz'];
                  $alDetalle['det_CosTotal']      = 0;   // REv
                  $alDetalle['det_ValTotal']      = round($result->fields['tad_Rechaz'] * $flPrecUnit,2);   //REv
                  $alDetalle['det_RefOperativa']  = 0;
                  $alDetalle['det_Estado']        = 1;
                  $alDetalle['det_CosUnitario']   = 0;
                  $alDetalle['det_ValUnitario']   = $flPrecUnit;
                  $alDetalle['det_Destino']       = 0;
                  fInsDetalleInv($db, $alDetalle);
                }
                if($ilRegNum_ca && $$flTotCaid <> 0) {
                  $alDetalle['det_RegNumero']     = $ilRegNum_ca;
                  $alDetalle['det_Secuencia']     = $ilSecCa++;
                  $alDetalle['det_CodItem']       = $result->fields['dos_CodItem'];
                  $alDetalle['det_CanDespachada'] = $result->fields['tad_Caidas'];
                  $alDetalle['det_UniMedida']     = $result->fields['act_UniMedida'];
                  $alDetalle['det_CantEquivale']  = $result->fields['tad_Caidas'];
                  $alDetalle['det_CosTotal']      = 0;   // REv
                  $alDetalle['det_ValTotal']      = round($result->fields['tad_Caidas'] * $flPrecUnit,2);   //REv
                  $alDetalle['det_RefOperativa']  = 0;
                  $alDetalle['det_Estado']        = 1;
                  $alDetalle['det_CosUnitario']   = 0;
                  $alDetalle['det_ValUnitario']   = $flPrecUnit;
                  $alDetalle['det_Destino']       = 0;
                  fInsDetalleInv($db, $alDetalle);
                }
//                echo "&nbsp;&nbsp;&nbsp;" . $alDetalle['det_CodItem'] .  "  ";
            }
          	$result->MoveNext();  	
          	}
          	return true;
//        echo "<br>" . $result->RecordCount() . " Registros Modificados\n";
        }
    else
         fErrorPage('','NO EXISTE TARJAS CON EL CRITERIO DE BUSQUEDA ESPECIFICADO', true, false);


}


/**
*   Calcula el saldo de las transacciones de inventario, genera una transaccion de liauidacion de inventario
*   para liquidarlo
* 	@access public
*   @param  object  $db       Ref. a la conexion
*   @param  object  $rsTarjas       Resultado de la selecciòn de tarjas
*   @param  date    $dlFecCierre    Fecha de Cierre de liquidaciòn, para determinar saldos de Cuentas
*   @param  date    $dlFechaLiq     Fecha de liquidaciòn (se aplica a comprobantes generados)
*   @param  integer $ilSemana       Semana correspondiente
*   @param  integer $ilNumProceso   Nùmero de proceso en ejecución
*   @param  integer $ilPeriodo      Nùmero de periodo en ejecución
* 	@return void
*/
function fLiquidaInvent(&$db, $rsTarjas, $dlFecCierre, $dlFechaLiq, $ilSemana, $ilNumProces, $ilPeriodo)
{
    global $gdFecInicio;
    global $ilSemana;
    global $slUsuario;

    $slWhere =  " com_TipoComp ='LI' AND com_Numcomp IN (SELECT DISTINCT tmp_LiqNumero FROM tmp_product)";
    $slDelet = "DELETE FROM invdetalle WHERE det_RegNumero IN " .
                "(SELECT com_RegNumero FROM concomprobantes WHERE " . $slWhere .")";
    if (!$db->Execute($slDelet )) fErrorPage('','NO SE PUDO ELIMINAR CABECERAS DE LIQUIDACION DE INVENTARIO -- PREVIOS', true);
    $slDelet = "DELETE FROM concomprobantes WHERE ". $slWhere ;
    if (!$db->Execute($slDelet )) fErrorPage('','NO SE PUDO ELIMINAR DETALLES DE LIQUIDACION DE INVENTARIO -- PREVIOS', true);

    $slSql = "DROP TABLE IF EXISTS tmp_sinvpr";
    if (!$db->Execute($slSql)) fErrorPage('','NO SE PUDO LIMPIAR SALDOS TEMPORALES DE INVENTARIO', true);
//
    $slSql = "SELECT com_CodReceptor,  det_CodItem, act_UniMedida, tmp_LiqNumero, tmp_CodProductor,
                     sum(det_CantEquivale * pro_Signo) AS xxx_SumCantidad,
                     sum(det_ValTotal * pro_Signo) AS xxx_SumValor,
                     sum(det_CantEquivale * pro_EfeAcumula) AS xxx_AcuCantidad,
                     sum(det_ValTotal * pro_EfeAcumula) AS xxx_AcuValor,
                     IFNULL(pre_PreUnitario,0) AS pre_PreUnitario,
                     sum(IF(com_RefOperat < " .$ilSemana . ",det_CantEquivale * pro_Signo, 0)) AS xxx_SalCantidad
              FROM invprocesos  join concomprobantes ON com_TipoComp = cla_TipoTransacc
                     JOIN tmp_product ON tmp_CodProductor = com_CodReceptor
                     JOIN invdetalle ON det_RegNumero = com_RegNumero
                     JOIN conactivos ON conactivos.act_Codauxiliar = det_CodItem
                     LEFT JOIN invprecios ON  invprecios.pre_LisPrecios = '3' AND invprecios.pre_CodItem = det_CodItem
              WHERE pro_codProceso = 5   AND
                    com_RefOperat <= " . $ilSemana .
                    " AND com_FecContab BETWEEN '" . $gdFecInicio . "' AND '" . $dlFecCierre . "'
              GROUP BY 1,2,3,4,5
              ORDER BY 1,2 ";
    $db->SetFetchMode(ADODB_FETCH_BOTH);
    $rsLiquida = $db->Execute($slSql);
    if (!$rsLiquida) fErrorPage('','NO SE PUDO GENERAR LIQUIDACION DE INVENTARIO', true);
    $ilProductor = false;
    $ilSecue=1;
    if ($rsLiquida->RecordCount() < 1) {
        echo "<br><br><br><br>NO EXISTE TARJAS PARA PROCESAR";
        return false;
    }
    $ilRegNumeroLN = false;
    while (!$rsLiquida->EOF )
    {
    	if ($ilProductor != $rsLiquida->fields['com_CodReceptor']) {
    	    $ilSecue = 1;
    	    $ilRegNumero = false;
    	    $ilRegNumeroLN = false;
//            echo "</td></tr><tr tr style='font-size:11px'><td width='80'>" . $rsLiquida->fields['com_CodReceptor'] .
//                " - " . $rsLiquida->fields['tad_NumTarja'] . "   : " . "</td><td>";
            fAgregaComprobante($db, 'LI', $rsLiquida->fields['tmp_LiqNumero'], 0, $dlFechaLiq, $dlFechaLiq,
                                $dlFechaLiq, 29, $rsLiquida->fields['tmp_CodProductor'], '.' ,
                                'Liquidación Sem ' . $ilSemana ,  0, 1, 0, 0,$ilSemana, 5, 1,
                                $ilNumProces, 593, $slUsuario, $ilPeriodo, date("Y-m-d"));
            $ilRegNumero = $db->Insert_ID();
            $ilProductor = $rsLiquida->fields['com_CodReceptor'];
        }
        $alDetalle = false;
        $flCanti = NZ($rsLiquida->fields['xxx_SumCantidad']);
        $flSaldo = $flCanti; //                                                 Cantidad a Cobrar / Pagar
//      Para asegurar que saldos negativos arastrados no afecten el calculo de la presente semana -----
        $flSalAn = NZ($rsLiquida->fields['xxx_SalCantidad']);
        if ($flSalAn < 0) { //             Si el saldo anterior es negativo
            $flCanti -= $flSalAn; //            No debe afectar la diferencia por cobrar / pagar
        }
//-----
        $flValor = NZ($rsLiquida->fields['xxx_SumValor']);
        $ilCodItem = NZ($rsLiquida->fields['det_CodItem']);
//      $ilValUni = $flCanti <> 0 ? $flValor / $flCanti: 0;
        if($ilRegNumero && $ilCodItem <> 0)  {
            if ($flCanti == 0) $flPrecUnit =0;
            else {
              $flPrecUnit = NZ(fDBValor($db, 'invprecios', 'pre_preUnitario', 'pre_CodItem = ' . $ilCodItem . ' AND pre_LisPrecios = 3'));
              if ($flPrecUnit == 0)  echo 'NO SE HA DEFINIDO PRECIO DE LIQUIDACION PARA EL ITEM : &nbsp;&nbsp;&nbsp;' . $ilCodItem  . '<br>';
            }
            if ($flCanti < 0 ) { //                           Si el productor entrega más cajas de las retiradas en bodega
                $flSalCant =$rsLiquida->fields['xxx_AcuCantidad'];
                $flSalValor=$rsLiquida->fields['xxx_AcuValor'];
                if ($flSalCant  > 0)//                              Pagar solo si hay saldo cobrado a favor del prod.
                    if ($flSalCant <>0) $flPrecUnit = round( $flSalValor / $flSalCant, 2);
                    else $flPrecUnit = 0;
                    if (ABS($flCanti) >  $flSalCant  ){ //           Pagar como maximo la cantidad cobrada
                        $flCanti = ($flSalCant) * -1 ;  //           El pago tiene efecto inverso sobre el saldo
                    }
            }
            $alDetalle['det_RegNumero']     = $ilRegNumero;
            $alDetalle['det_Secuencia']     = $ilSecue++;
            $alDetalle['det_CodItem']       = $ilCodItem;
            $alDetalle['det_CanDespachada'] = $flCanti;
            $alDetalle['det_UniMedida']     = NZ($rsLiquida->fields['act_UniMedida']);
            $alDetalle['det_CantEquivale']  = $flCanti; //      Cantidad que finalmente se liquida
            $alDetalle['det_CosTotal']      = 0;   // REv
            $alDetalle['det_ValTotal']      = round($flPrecUnit * $flCanti,2);
            $alDetalle['det_RefOperativa']  = 0;
            $alDetalle['det_Estado']        = 1;
            $alDetalle['det_CosUnitario']   = 0;
            $alDetalle['det_ValUnitario']   = $flPrecUnit;
            $alDetalle['det_Destino']       = 0;
            fInsDetalleInv($db, $alDetalle);
// echo "<br> $ilCodItem / $flSaldo // $flCanti " .  " ::" . abs($flSaldo) . " ===" . abs($flCanti);
//          Agregar un comprobante LN por lo que no se pague al productor (saldo negativo no justficado por historia)
            if ( $flSaldo < 0 && abs($flSaldo) > abs($flCanti)) {
                if (!$ilRegNumeroLN) { //                   Añadir el comprobante si no se lo ha hecho previamente
                    fAgregaComprobante($db, 'LN', $rsLiquida->fields['tmp_LiqNumero'], 0, $dlFechaLiq, $dlFechaLiq,
                                $dlFechaLiq, 29, $rsLiquida->fields['tmp_CodProductor'], '.' ,
                                'Inventario a favor de productores, no justificado' . $ilSemana ,  0, 1, 0, 0,$ilSemana, 5, 1,
                                $ilNumProces, 593, $slUsuario, $ilPeriodo, date("Y-m-d"));
                    $ilRegNumeroLN = $db->Insert_ID();
                } //                    Fin de añadir comprobante LN
                $flCanti = ($flSaldo - $flCanti) * -1; //  El excedente no pagado al productor
                $alDetalle['det_RegNumero']     = $ilRegNumeroLN;
                $alDetalle['det_CanDespachada'] = $flCanti;
                $alDetalle['det_CantEquivale']  = $flCanti; //      Cantidad que finalmente se liquida
                $alDetalle['det_CosTotal']      = 0;   // REv
                $alDetalle['det_ValTotal']      = round($flPrecUnit * $flCanti,2);
                $alDetalle['det_RefOperativa']  = 0;
                $alDetalle['det_Estado']        = 1;
                $alDetalle['det_CosUnitario']   = 0;
                $alDetalle['det_ValUnitario']   = $flPrecUnit;
                $alDetalle['det_Destino']       = 0;
                fInsDetalleInv($db, $alDetalle);
            } //        Fin de proceso LN
        }
        $rsLiquida->MoveNext();
    }
    return true;
}

/**
*   Calcula la Liquidacion incluyendo todos los rubros
* 	@access public
*   @param  object  $db       Ref. a la conexion
*   @param  object  $rsTarjas       Resultado de la selecciòn de tarjas
*   @param  date    $dlFecCierre    Fecha de Cierre de liquidaciòn, para determinar saldos de Cuentas
*   @param  date    $dlFechaLiq     Fecha de liquidaciòn (se aplica a comprobantes generados)
*   @param  integer $ilSemana       Semana correspondiente
*   @param  integer $ilNumProceso   Nùmero de proceso en ejecución
*   @param  integer $ilPeriodo      Nùmero de periodo en ejecución
*   @param  integer $ilProductor    Codigo del productor, para el que se ejecuta el proceso, opcional, si no se especifica aplicar sobre todo el proceso
* 	@return void
*/
function fLiquidaGeneral($db, $rsTarjas, $dlFecCierre, $dlFechaLiq, $ilSemana, $ilNumProces, $ilPeriodo, $ilProductor=false)
{
    global $slUsuario;
//  ------------------ Definicion de Rubros que se  deben procesar: Busca definiciones de rubros existentes para el
//                     proceso corriente ($ilNumproces), si no existe, la genera en base a la lista de rubros activos
//                     y luego los presenta en  un recordset
    $slSubQry= "(SELECT com_RegNumero FROM concomprobantes
                        WHERE com_TipoComp = 'LQ' AND com_Numproceso = " . $ilNumProces .
                              ($ilProductor?" AND com_codreceptor=" : "") . $ilProductor . ")";
    $slDelet = "DELETE FROM condetalle WHERE  det_RegNumero IN " . $slSubQry ;
    if(!$db->Execute($slDelet))  fErrorPage('','NO SE PUDO ELIMINAR CONTABILIZACION DE LIQUIDACIONES ANTERIORES (proc='. $ilNumProces . ")", true);
    $slDelet = "DELETE FROM liqliquidaciones WHERE liq_NumProceso = ". $ilNumProces;
    if(!$db->Execute($slDelet))  fErrorPage('','NO SE PUDO ELIMINAR DETALLES DE LIQUIDACIONES ANTERIORES (proc='. $ilNumProces . ")", true);
    $slDelet = "DELETE FROM concomprobantes WHERE com_TipoComp = 'LQ' AND com_NumProceso = " . $ilNumProces;
    if(!$db->Execute($slDelet))  fErrorPage('','NO SE PUDO ELIMINAR DETALLES DE LIQUIDACIONES ANTERIORES (proc='. $ilNumProces . ")", true);

    $rsRub = $db->Execute("Select * FROM liqprocesosrub WHERE prd_NumProceso=" . $ilNumProces) ;
    if(!$rsRub) fErrorPage('','NO SE PUDO SELECCIONAR LOS RUBROS', true);
    if(!$rsRub->RecordCount()) {
       $slSql = "INSERT INTO liqprocesosrub(prd_NumProceso, prd_CodRubro, prd_Valor, prd_IndGenera, prd_Usuario)" .
                        "SELECT " . $ilNumProces . ", rub_CodRubro, 0, rub_IndGeneracion, '". $slUsuario . "' " .
                                "FROM liqrubros " .
                                "WHERE rub_activo > 0";
    if(!$db->Execute($slSql )) fErrorPage('','NO SE PUDO AGREGAR LOS RUBROS', true);
    }
    unset($rsRub);
    $slSql = "SELECT liqrubros.*, va.var_clase as vra_clase, vb.var_clase as vrb_clase
             FROM ((liqprocesosrub JOIN liqrubros ON prd_CodRubro  = rub_CodRubro)
                     LEFT JOIN genvarproceso va on va.var_nombre = rub_variablea)
                     LEFT JOIN genvarproceso vb on va.var_nombre = rub_variableb
             WHERE prd_Numproceso = " . $ilNumProces  . " AND prd_IndGenera > 0 AND
                    rub_IndDetalle = " ;
    $db->SetFetchMode(ADODB_FETCH_BOTH);
    $rsRubDet = $db->Execute($slSql . 1 . " ORDER BY rub_OrdCalculo" ); // rubros de detalle
    $rsRubGen = $db->Execute($slSql . 0 . " ORDER BY rub_OrdCalculo" ); // rubros generales
    if (!$rsRubDet) fErrorPage('','NO SE GENERAN LOS RUBROS DE DETALLE', true);
    if (!$rsRubGen) fErrorPage('','NO SE GENERAN LOS RUBROS GENERALES', true);
    unset($rsLiquida);
    $ilProductor = false;
    $ilSecue=1;
    global $gdFecInicio;
//  ------------------  Procesamiento de Liquidacion: Toma cada registro del detalle del recordset tarjas ($rsTarjas),
//                      y lo coteja contra todos los registros del recordset Rubros ($rsRub) analizando en cada caso
//                      el tipo de operación aritmètica a efectuar y el tipo de variable que maneja. Aplicando procedi-
//                      mientos diferentes si se trata de variable de Tarja, de productor o de Embarque, etc.
//                      En cada nuevo productor se genera la cabecera de liquidación.
    $rsTarjas->MoveFirst();
    if ($rsTarjas->RecordCount() < 1) {
        echo "<br><br><br><br>NO EXISTE TARJAS PARA PROCESAR";
        return false;
    }
    $flAcum = 0;
    $flMini = 10; //                                               Valor minimimo por liquidacion
    while ($trj = $rsTarjas->FetchNextObject()) {               // proceso ciclico de tarjas:
        $flVunit = 0;
        $ilTarja= 0;//Numero de tarja para rubros con detalle
        $ilTarjs= 0;//secuencia de tarja para rubros con detalle
        if ($ilProductor != $trj->TAC_EMBARCADOR) { // en cada nuevo productor
            $ilProductor = $trj->TAC_EMBARCADOR;
//---- Definir si la liquidacion tiene una sola cabecera (LL) y un invdetalle y un condetalle ó son  dos cabeceras (LI, LQ)
            fAgregaComprobante($db, 'LQ', $trj->TAD_LIQNUMERO, 0, $dlFechaLiq, $dlFechaLiq,
                                $dlFechaLiq, 29, $trj->TAC_EMBARCADOR, '.' ,
                                'Liquidación Sem ' . $ilSemana , 0, 1, 0, 0, $ilSemana, 5, 1,
                                $ilNumProces, 593, $slUsuario, $ilPeriodo, date("Y-m-d"));
            $ilNumReg_lq = $db->Insert_ID();
            $rsRubGen->MoveFirst();
            $flAcum = 00;
            $flMini = 10; //                                                Valor minimo por liquidacion
            while ($rub = $rsRubGen->FetchNextObject()) {
                $flCanti = 0;
                $flValor= 0.00;
//echo "<br> rbro: " .  $trj->TAD_LIQNUMERO . " / " . $rub->RUB_DESCLARGA . " / " . $rub->RUB_INDDBCR;
                if ($rub->RUB_INDCANTIDAD) $flCanti = $trj->TAD_CANTEMBARCADA;
                if ($rub->RUB_INDDBCR == 1 || ($rub->RUB_INDDBCR == -1 && $flAcum >= $flMini) || $rub->RUB_ORDCALCULO < 20) {//    Si son Ingresos ò  Egresos y el  acumulado > Minimo
                    $flValor = fResuelve($db, $rub, $trj, $gdFecInicio, $dlFecCierre);
                    if ($rub->RUB_ORDCALCULO >= 20 && ($rub->RUB_INDDBCR == -1 && ($flAcum - $flValor) < $flMini)) $flValor = $flAcum - $flMini; //  Si el Descuento sobrepasa el minimo
                    }
                else  $flValor = 0;
                fGrabaLiqDet($db, $ilNumProces, $trj->TAD_LIQNUMERO, 0,0, $rub->RUB_CODRUBRO, $rub->RUB_DESCLARGA, $flCanti, 0, $flValor, 1);
                $flAcum += ($flValor * $rub->RUB_INDDBCR); //                                    Acumulando
/**
echo "    valor: " . $flValor;
echo "    acumu: " . $flAcum;
**/
            }
        }
        $rsRubDet->MoveFirst();
        while ($rub = $rsRubDet->FetchNextObject()) {
            $flValor= 0.00;
            $flCanti = 0;
            if ($rub->RUB_INDCANTIDAD) $flCanti = $trj->TAD_CANTEMBARCADA;
            if($rub->RUB_OPERACION != "A") { //Variable de Tarja
                if ($rub->RUB_INDDBCR == 1 || ($rub->RUB_INDDBCR == -1 && $flAcum >= $flMini) || $rub->RUB_ORDCALCULO < 20) {//    Si son Ingresos ò  Egresos y el  acumulado > Minimo
                   $flValor = fResuelve($db, $rub, $trj, $gdFecInicio, $dlFecCierre);
                    if ($rub->RUB_ORDCALCULO >=20  && ($rub->RUB_INDDBCR == -1 && ($flAcum - $flValor) < $flMini)) $flValor = $flAcum - $flMini; //  Si el Descuento sobrepasa el minimo
                    }
                else  $flValor = 0;
                fGrabaLiqDet($db, $ilNumProces, $trj->TAD_LIQNUMERO, $trj->TAD_NUMTARJA, $trj->TAD_SECUENCIA, $rub->RUB_CODRUBRO, $rub->RUB_DESCLARGA, $flCanti, 0, $flValor, 1);
                $flAcum += $flValor * $rub->RUB_INDDBCR; //                                    Acumulando
                }
            }
        }
    return true;
}

function fResuelve(&$ds, &$rub, &$trj, $gdFecInicio, $dlFecCierre)
{
    $flOper[1] = 0;
    $flOper[2] = 0;
 //  if ($trj->TAC_EMBARCADOR == 15124)
   if ($rub->RUB_OPERACION == "A" || $rub->RUB_OPERACION == "S")  {
        if (substr($rub->RUB_VARIABLEA,0,4) == 'PCXC') {   // se aplica sobre saldos
            if (!empty($rub->RUB_CTAORIGEN)){
                if ($rub->RUB_OPERACION == "A" && $rub->RUB_VARIABLEB == 'PPOLICO') {
//echo " 1 " ;
                    return fTraeSaldo($ds, $trj->TAC_EMBARCADOR, $rub->RUB_CTAORIGEN, $gdFecInicio, $dlFecCierre, true);
                }
                if (is_null($rub->RUB_CONSTANTEA) ||  $rub->RUB_CONSTANTEA == 0 ){
//echo " 2 " ;
                    $flOper[1] = fTraeSaldo($ds, $trj->TAC_EMBARCADOR, $rub->RUB_CTAORIGEN, $gdFecInicio, $dlFecCierre, false); //Primer Operando aplica  un saldo
                }
                else $flOper[1] = NZ($rub->RUB_CONSTANTEA);

                if (is_null($rub->RUB_CONSTANTEB) ||  $rub->RUB_CONSTANTEB == 0 ){
//echo " 3 " ;	
        			$flOper[2] = fTraeSaldo($ds, $trj->TAC_EMBARCADOR, $rub->RUB_CTAORIGEN, $gdFecInicio, $dlFecCierre, false); //Segundo aplica  un saldo
                }
                else $flOper[2] = NZ($rub->RUB_CONSTANTEB);
//echo " 4 " ;
            }
        } // si no, es indefinido, y retorna 0
  }
    else {
//echo " 5 " ;
        if (is_null($rub->RUB_CONSTANTEA) ||  $rub->RUB_CONSTANTEA == 0) {
//echo " 6 " ;
            if (substr($rub->RUB_VARIABLEA,0,4) == 'PCXC') $flOper[1] = fTraeSaldo($ds, $trj->TAC_EMBARCADOR, $rub->RUB_CTAORIGEN, $gdFecInicio, $dlFecCierre, true); //Primer Operando aplica  una CXC
            else $flOper[1] = fTrae($ds, $rub->RUB_VARIABLEA, $trj); //Primer Operando aplica  una variable
        }
        else  $flOper[1] = NZ($rub->RUB_CONSTANTEA);
//echo " 7 " ;
        if (is_null($rub->RUB_CONSTANTEB) ||  $rub->RUB_CONSTANTEB == 0 ) $flOper[2] = fTrae($ds, $rub->RUB_VARIABLEB, $trj); //Sgdo Operando aplica  una variable
        else $flOper[2] = $rub->RUB_CONSTANTEB; //Sgdo Operando aplica  una constante;
//echo " 8 " ;
    }
//echo " 9 " ;
    return fCalcula($rub->RUB_OPERACION, $flOper[1], $flOper[2]);
}
/**
*   Extrae nu dato del objeto variable.
*   @access     public
*   @param      object      $db         Referencia a un objeto conexion
*   @param      string      $NombVar    Nombre de variable a extraer
*   @param      object      $rs         Objecto record de tarjas
**/

function fTrae(&$db, $NombVar, &$rs) {
    global $ilSemana;
    switch ($NombVar){
        case 'TCAJEMBA':
            return NZ($rs->TAD_CANTEMBARCADA);
            break;
        case 'TCAJRECH':
            return NZ($rs->TCAJRECH);
            break;
        case 'TCAJCAID':
            return NZ($rs->TCAJCAID);
            break;
        case 'PVALOFIC':
            return NZ($rs->PVALOFIC);
            break;
        case 'PDIFPREC':
            return NZ($rs->PDIFPREC);
            break;
        case 'PBONPREC':
            return NZ($rs->PBONPREC);
            break;
        case 'TEMPFALT': // Faltante de Inventario (lo que el productor no embarca y se lo cobra an liquidacion LI)
            $slSql =    "SELECT  sum(det_ValTotal) as ValorInv
                            FROM concomprobantes, invdetalle
                        WHERE com_Tipocomp = 'LI' AND
                            com_Numcomp = " . $rs->TAD_LIQNUMERO. " AND
                            det_regnumero = com_regnumero AND
                            det_CantEquivale >0 ";
            $db->SetFetchMode(ADODB_FETCH_BOTH);
            $rsr = $db->Execute($slSql);
            if (!$rsr) fErrorPage('',"NO SE PUDO DEFINIR VARIABLE 'TEMPFALT' PARA LA LIQUIDACION " . $rs->TAD_LIQNUMERO, true);
            return NZ($rsr->fields[0]);
            break;
        case 'TEMPEXCE': // Excedente de material que se lo paga al productor, Cambiarlo de signo
            $slSql =    "SELECT  sum(det_ValTotal) as ValorInv
                            FROM concomprobantes, invdetalle
                        WHERE com_Tipocomp = 'LI' AND
                            com_Numcomp = " . $rs->TAD_LIQNUMERO. " AND
                            det_regnumero = com_regnumero AND
                            det_CantEquivale < 0 ";
            $db->SetFetchMode(ADODB_FETCH_BOTH);
            $rsr = $db->Execute($slSql);
            if (!$rsr) fErrorPage('',"NO SE PUDO DEFINIR VARIABLE 'TEMPEXE' PARA LA LIQUIDACION " . $rs->TAD_LIQNUMERO, true);
            return NZ($rsr->fields[0]) * (-1);
            break;
        case 'TCAJRETI':
/*
            $slSql = "SELECT  sum(det_cantequivale)
                            FROM concomprobantes, invdetalle, conactivos
                        WHERE
                            com_Tipocomp = 'EP' AND
                            com_RefOperat = " . $ilSemana . "  AND
                            com_codReceptor = " . $rs->TAC_EMBARCADOR . " AND
                            det_regnumero = com_regnumero AND
                            act_codauxiliar = det_Coditem AND
                            act_Grupo = 210 AND act_descripcion LIKE 'TAPA%' " ;

            $db->SetFetchMode(ADODB_FETCH_BOTH);
            $rsr = $db->Execute($slSql);
            if (!$rsr) fErrorPage('',"NO SE PUDO DEFINIR VARIABLE 'TCAJRETI' PARA PROD. " . $rs->TAC_EMBARCADOR  , true);
            return NZ($rsr->fields[0]);

            $slSql =    "SELECT SUM(det_cantequivale)
                            FROM concomprobantes , invdetalle, conactivos
                        WHERE
                            com_Tipocomp = 'LI' AND
                            com_Numcomp = " . $rs->TAD_LIQNUMERO. " AND
                            det_regnumero = com_regnumero AND
                            act_codauxiliar = det_Coditem AND
                            act_Grupo = 210 AND act_descripcion LIKE 'TAPA%' ";


*/
            $slSql =    "SELECT SUM(det_cantequivale)
                            FROM concomprobantes JOIN invdetalle ON com_Tipocomp = 'LI' AND
                                 com_Numcomp = " . $rs->TAD_LIQNUMERO. " AND det_regnumero = com_regnumero
                            JOIN conactivos ON act_codauxiliar = det_Coditem AND
                        WHERE
                            det_regnumero = com_regnumero AND
                            act_codauxiliar = det_Coditem AND
                            act_Grupo = 210 AND act_descripcion LIKE 'TAPA%' AND det_cantequivale > 0";
            $rsr = $db->Execute($slSql);
            $flCantReti = NZ($rs->TAD_CANTRECIBIDA); // - NZ($rs->TAD_CANTRECHAZADA) - NZ($rs->TAD_CANTCAIDAS);
            if ($rs) $flCantReti += NZ($rsr->fields[0]); // si existe cantidad descontada
            unset($rsr);
            if ($flCantReti) return $flCantReti; //Si la cantidad retirada es negativa, retornar cero
            else return 0;
            break;
        case 'TVALUNIT':
            return NZ($rs->TVALUNIT);
            break;
        case 'TBONUNIT':
            $flVal = NZ($rs->TADEUNIT);
            return $flVal < 0 ? $flVal * (-1.00) : 0;   // Si el Adelanto es negativo, se trata de un bono
        case 'TADEUNIT':
            $flVal = NZ($rs->TADEUNIT);
            return $flVal > 0 ? $flVal : 0;   // Si el Adelanto es negativo, se trata de un bono
            break;
        case 'TVALOFIC':
            return round(NZ($rs->TAD_CANTEMBARCADA) * NZ($rs->TVALUNIT),2);
            break;
        case 'TVALPROD':
            return round(NZ($rs->TAD_CANTEMBARCADA)  * (NZ($rs->TVALUNIT) - NZ($rs->TADEUNIT)),2);
            break;
        case 'TVALADEL':
            $flVal = NZ($rs->TADEUNIT);
            return $flVal > 0 ? round($flVal * NZ($rs->TAD_CANTEMBARCADA),2) : 0;   // Si el Adelanto es negativo, se trata de un bono
            break;
        case 'TBASIMPO':
            return NZ($rs->TAD_CANTEMBARCADA) * (NZ($rs->TVALUNIT) + fTrae($db, 'TBONUNIT', $rs)); // Base Impon: Cant * ( Prec. ofic + Bono)
            break;
        case 'TVALBONO':
            $flVal = NZ($rs->TADEUNIT);
            return $flVal < 0 ? round($flVal * NZ($rs->TAD_CANTEMBARCADA) * (-1),2) : 0;   // Si el Adelanto es negativo, se trata de un bono
            break;
     }
}

/**     Determina el saldo de nua cuenta por cobrra del productor
*       @access     public
*       @param      object      $ds         Referencia a la conexion
*       @param      integr      $pProd      Còdigo del productor
*       @param      string      $pCuent     Còdigo de la cuenta
*       @param      date        $pDesde     Fecha de Inicio para el cálculo
*       @param      date        $pHAsta     Fecha de Cierre para el cálculo
*       @param      bool        $pPolit     Indica si se aplica politica o no
*       @return     float                   Saldo de la cuenta.
*/
function fTraeSaldo( &$db, $pProd, $pCuent,$pDesde, $pHasta, $pPolit=NULL)
{
    global $gdFecInicio;
    if (!isset($pHasta)) $pHasta= date('Y-m-d');
    if (is_numeric($pHasta)) $pHasta=str2date($pHasta, 'ymd');
    $lSql= "SELECT sum(det_Valdebito - det_ValCredito) as tmp_saldo ".
                "FROM concomprobantes JOIN condetalle on det_Regnumero = com_RegNUmero " .
                "WHERE com_FecContab BETWEEN '". $pDesde . "' AND '" . $pHasta . "' AND " .
                      "com_EstProceso >= 5 AND det_CodCuenta = '" . $pCuent . "' AND " .
                      "det_IDAuxiliar = " .$pProd;
    $flSaldo =0;
// echo "<br> " . $lSql;
    if (is_object($db)) {
        $db->SetFetchMode(ADODB_FETCH_BOTH);
        $rs = $db->Execute($lSql);
        if(!$rs) fErrorPage('',"NO SE DETERMINO SALDO DE CXC PARA " . $pCuent . " - " . $pProd , true, false);
        $flSaldo = NZ($rs->fields['tmp_saldo']);
        if ($flSaldo < 0) return 0; //          No retorna valores por pagar automaticamente.
        }
    if ($pPolit) {
        $flValor = 0;
//      Seleccionar la primera politica vigente
        $sSql= "SELECT IFNULL(pol_Valor,0), pol_politica
                    FROM conpoliticas
                    WHERE pol_Cuenta = '" . $pCuent . "' AND
                          pol_Auxiliar = " .$pProd . " AND
                          pol_Vigencia >= '" . $pHasta . "' ORDER BY pol_Vigencia LIMIT 1";
        $db->SetFetchMode(ADODB_FETCH_BOTH);
        $rs = $db->Execute($sSql);  // Obtener la politica de pago
        if(!$rs) fErrorPage('',"NO SE PUDO DEFINIR POLITICA  DE COBRO  PARA " . $pCuent . " - " . $pProd , true, false);
        $rs->MoveFirst();
        if ($rs->EOF)return $flSaldo;
        $flValor =$rs->fields[0];
        if($rs->fields[1] == "O" ) return $flValor =$rs->fields[0]; // si existe una politica "obligatoria" aplicarla sin mas.
        unset ($rs);
        if ($flValor < 0 ) return 0;
        if ($flValor == 0 || $flValor > $flSaldo) return $flSaldo; //Si el valor de la politica de pago supera al saldo
        return $flValor;
    }
    return $flSaldo;
}

/**     Graba un detalle de liquidaciones
*       @access     public
*       @param      int         $NumProc        Numero de proceso
*       @param      int         $NumLiq         Numero de liqwuidacion
*       @param      int         $NumTar         Número de Tarja
*       @param      int         $TarjaSec       Secuencia de Tarja
*       @param      int         $CodRub         Código de rubro
*       @param      string      $Descr          Descripcion del rubro
*       @param      int         $Canti          Cantidad, si se aplica
*       @param      int         $ValUni         Valor Unitario
*       @param      int         $ValTot         Valor Total
*       @param      int         $EsGene         Si este rubro es generado
**/
function fGrabaLiqDet(&$db, $NumProc, $NumLiq, $NumTar, $TarSec, $CodRub, $Descr, $Canti, $ValUni, $ValTot, $EsGene)
{
    $slSql = "INSERT INTO liqliquidaciones (liq_NumProceso, liq_NumTarja, liq_NumLiquida, liq_TarjaSecue, liq_CodRubro, ".
                          "liq_Descripcion, liq_Cantidad, liq_ValUnitario, liq_ValTotal, liq_EsGenerado) " .
             "VALUES( $NumProc, $NumTar, $NumLiq,   $TarSec, $CodRub, '" . $Descr . "', $Canti, $ValUni, $ValTot, $EsGene)";
    if(!$db->Execute($slSql))
        fErrorPage('',"NO SE PUDO GRABAR DETALLE DE LIQUIDACION  $NumLiq",  true, false);
}

/**     Presenta un grid con resultado de consulta
*       @access     public
*       @param      int      $ilTipo            Tipo de datos que se presentaran
*       @param      int      $ilNumproceso      Numero del proceso en ejecucion
*       @return     void
**/
function fPresentaGrid($ilTipo, $ilNumProces){
global $txt;
return;
/*
    switch ($ilTipo) {
    case 2:
    case 3:
        $qStr=  "SELECT concat(left(per_Apellidos, 15), '  ' ,left(per_Nombres,12)),
                        tad_numtarja as TARJA,
                        tad_secuencia as SEC,
                        caj_Descripcion as CAJA,
                        (tad_CantRecibida - tad_CantRechazada  )  as EMBARCADO,
                        (tad_CantRecibida - tad_CantRechazada  )  * tad_valunitario AS 'PREC. OFICIAL' ,
                        (tad_CantRecibida - tad_CantRechazada  )  * tad_difunitario as ' ADELANTO'
                FROM ((liqtarjadetal join  liqtarjacabec on tar_NUmTarja = tad_Numtarja)
                JOIN conpersonas  on per_CodAuxiliar = tac_embarcador )
                JOIN liqcajas on caj_CodCaja = tad_CodCaja
                WHERE tad_LiqProceso = " . $ilNumProces .
                " ORDER BY 1, 2, 3 ";
        break;
    case 4:
        $qStr=  "SELECT concat(left(per_Apellidos, 15), '  ' ,left(per_Nombres,12)), tad_numtarja  AS 'TARJA',
                        tad_secuencia as SEC, caj_Descripcion as CAJA,
                        (tad_CantRecibida - tad_CantRechazada  ) AS EMBARCADO,
                        tad_CantRechazada  AS 'RECHAZOS',
                        tad_CantCaidas AS 'CAIDAS'
                FROM liqtarjadetal, concomprobantes, conpersonas, liqcajas
                WHERE tad_LiqProceso = " . $ilNumProces . " and caj_CodCaja = tad_CodCaja
                       AND  com_Tipocomp in ('LE', 'LR', 'LC', 'LL' ) AND
                       com_Numcomp = tad_NumTarja AND per_CodAuxiliar = com_CodReceptor
                       ORDER BY 1, 2, 3 ";
        break;
    case 5:
       $qStr = "SELECT concat(per_Apellidos, '  ' ,per_Nombres) PRODUCTOR , liq_NUmLiquida as 'LIQ.#',
                        rub_desccorta AS RUBRO,
                        liq_cantidad AS CANTIDAD,
                        liq_Valunitario as 'VAL. UNIT',
                        liq_ValTotal as 'VALOR'
                FROM ((liqliquidaciones join   liqrubros on rub_codrubro = liq_codrubro)
                JOIN concomprobantes on com_numcomp = liq_numliquida)
                JOIN conpersonas on com_codreceptor = per_codauxiliar
                WHERE liq_NUmProceso = " .$ilNumProces . "  and com_tipoComp = 'LQ'
                ORDER BY 1, 2 ";
        break;
    }
//echo $qStr;
    $grid = new baaGrid ($qStr, DB_MYSQL);
    $grid->setTableAttr('border="0" cellspacing="1" width="100%" ');
    $grid->setDateFormat('D, jS M');
    $grid->setWidth(0,'25%','10%');
    $grid->setHeaderClass('head1');
    $grid->setRowClass('data1p,data1p');
    $grid->setOnChange(0, 2);

    $grid->setSubTotalClass('sub1');
    $grid->setCount(1);

    switch ($ilTipo) {
    case 1:
    case 2:
    case 3:
        $grid->setHeadings('PRODUCTOR', 'TARJA', 'SEC', 'EMBARC', 'P/OFICIAL', 'ADELANT');
          $grid->setAlign(4,'R');
          $grid->setAlign(5,'R');
          $grid->setAlign(6,'R');
          $grid->setTotal(4);
          $grid->setTotal(5,2);
          $grid->setTotal(6,2);
        break;
    case 4:
        $grid->setHeadings('PRODUCTOR', 'LIQUIDAC.', 'RUBRO', 'CANT', 'VAL UNI.', 'VALOR TOT.');
        $grid->setAlign(1,'R');
        $grid->setAlign(3,'R');
        $grid->setAlign(4,'R');
        $grid->setAlign(5,'R');
        $grid->setTotal(3,0);
        $grid->setTotal(4,2);
        $grid->setTotal(5,2);
        $grid->setCondition(3,'=',"0", "#EEEECC","#EEEECC");
        $grid->setCondition(4,'=',"0", "#EEEECC","#EEEECC");
        $grid->setCondition(5,'=',"0", "#EEEECC","#EEEECC");

        break;
    }
//    echo "<DIV style='POSITION: absolut;'>";
    $grid->display();
//    echo "</DIV></td>";
*/
}

class cBitacoraRec
{
    var $c = Array();       // Campos de la tabla
    var $tabla = "genbitacora"; // Nombre de la tabla
/**
*   Constructor de la clase
*   @access private
*   @param  object      $pCon       Objeto Conexion
*   @param  string      $pClase     Clase de registro
*   @param  string      $pTipo      Tipo de Documento, proceso, etc
*   @param  integer     $pNumero    Nùmero del documento, proceso, etc
*   @param  datetime    $pFecha     Fecha de Inicio
*   @param  string      $pEvento    Acción que dispara la bitacora
*   @param  decimal     $pValor     Valor numerico asociado
*   @param  integer     $pEstado    Estado final del proceso:   0 = N.D.,         1 = OK,     -1 Fallo de seguridad,
                                                                -2 Fallo operativo, -3 = Fallo del usuario
*   @param  string      $pObservac  Texto explicativo)
*/

function cBitacoraRec($pCon, $pTipo = " ", $pNumero = 0,  $pEvento="", $pValor=0, $pFecha=0, $pEstado=0, $pObservac="", $pClase="" ) {
    $this->bd = $pCon;
    $this->c["bit_ID"] = NULL;
    $this->c["bit_clase"] = $pClase;
    $this->c["bit_tipo"] = $pTipo;
    $this->c["bit_numero"] = $pNumero;
    if ($pFecha=0) $this->c["bit_fecha"] = getdate();
    else $this->c["bit_fecha"] = $pFecha;
    $this->c["bit_usuario"] = isset($_SESSION["g_usua"]) ? $_SESSION["g_usua"] : "" ;
    $this->c["bit_evento"] = $pEvento;
    $this->c["bit_valor"] = $pValor;
    $this->c["bit_termino"] = 0;
    $this->c["bit_estado"] = $pEstado ;
    $this->c["bit_observacion"] = $pObservac;
    $this->f = $pCon->MetaColumns($this->tabla,true);
}
/*
function fGraba($pData=false) {
    $slInsTxt = false;
    $slValTxt = "";
    reset($pData);
    if (is_array($pData)) {
        while (list ($key, $val) = each ($pData)) {
           if (isset($this->c[$key])) $this->c[$key] = $value;
        }
    }
    while (list ($key, $val) = each ($this->c)) {
            $slTipo = this->f[strtoupper($key)]->type;
            if ($slTipo = 'varchar' or $slTipo = 'char' or $slTipo = 'date')
                $val = $this->db->qstr($val);
            if ($slInsTxt) {
                $slInsTxt .= ", " . $key;
                $slValTxt .= ", " . $val;
            }
            else {
                $slInsTxt = $key;
                $slValTxt = $val;
            }
        }
    $slSql= "INSERT INTO " . $this->tabla . "(" . $slInsTxt . ") ".
                    "VALUES (" . $slValTxt . ")";
    if (!$this->db->Execute($slSql))
        fErrorPage('',"NO SE PUDO GRABAR BITACORA DEL PROCESO $NumProces",  true, false);
    return $this->db->Insert_ID();
}
*/
} // Fin clase cBitacoraRec
/*
    Inicio ----------------------------------------------------------------------
*/
//$IsValid = checkdate($ValidatingDate[ccsMonth], $ValidatingDate[ccsDay], $ValidatingDate[ccsYear]);
$inicio = microtime();
$txt = "<br> Inicio&nbsp;&nbsp;&nbsp;&nbsp;: " . date ("d M Y, H \h\\r\s: i \m\i\\n: s \s\e\g");
$ilNumProces=fGetParam('pPro',false);//             Numero de lote de liquidaciones a ejecutar
$ilProductor=fGetParam('pPrd',false);//             Código de productor a ejecutar, si es falso, se aplica a todo el lote
$slMensaje  =false;
$slUsuario = $_SESSION['g_user'];
$ilPeriodo = false;
//
$ADODB_FETCH_MODE = ADODB_FETCH_BOTH;
$db = &ADONewConnection('mysql');
$db->autoRollback = true;
$db->PConnect(DBSRVR, DBUSER, DBPASS, DBNAME);
$db->debug=fGetParam('pAdoDbg', 0);
$db->SetFetchMode(ADODB_FETCH_BOTH);
fDesBloquea($db);
//                                                      Acceso y Validacion al proceso que se desea ejecutar
$rs = $db->Execute("SELECT * FROM liqprocesos WHERE pro_ID = ". $ilNumProces );
if (!$rs) fErrorPage('',"NO ESTA DEFINIDO EL PROCESO  " . $ilNumProces);
$rs->MoveFirst();
$rec = $rs->FetchNextObject();
$dlFecLiquid=$rec->PRO_FECHALIQUID;
$dlFecCierre=$rec->PRO_FECHACIERRE;
$gdFecInicio= fDBValor($db, "genparametros", "par_Valor1", "par_clave = 'LIINIC'");
setlocale (LC_TIME, "");
if(strlen($gdFecInicio) <> 10) die ("El Parametro de 'Fecha Inicial de Liquidaciones' ($gdFecInicio) es incorrecto");
if (($timestamp = strtotime($gdFecInicio)) === -1 ) {
   die ("El Parametro de 'Fecha Inicial de Liquidaciones' ($gdFecInicio) es incorrecto");
}
// $gdFecInicio='2004/12/30';                                // Fecha Inicial Para todos los procesos
$ilSemana   = $rec->PRO_SEMANA;
$ilAno = $rec->PRO_ANOPROCESO;
$ilEstadoProc = (isset($_GET["pOpc"]))?$_GET["pOpc"]:$rec->PRO_ESTADO;
if (!$ilNumProces) $slMensaje = "NO SE HA DEFINIDO EL PROCESO<BR>";
if (!$dlFecLiquid) $slMensaje .= "NO SE HA DEFINIDO FECHA DE LIQUIDACION<BR>";
if (!$dlFecCierre) $slMensaje .= " NO SE HA DEFINIDO FECHA DE CIERRE<BR>";
if (!$ilSemana) $slMensaje .= " SEMANA DE PROCESO INVALIDA<BR>";
if (!$ilEstadoProc) $slMensaje .= " SEMANA DE PROCESO INVALIDA<BR>";
if (!$ilAno) $slMensaje .= " AÑO DE PROCESO INVALIDO<BR>";
if ($slMensaje) fErrorPage('',$slMensaje, true, false);
unset($rs);
set_time_limit(20*60);
if ($ilEstadoProc >  7) $ilEstadoProc = 7;
if ($ilEstadoProc <= 1) $ilEstadoProc = 2;
//                                                                      Determinar el periodo contable y su estado
$slSqlper="SELECT per_PerContable, per_estado
            FROM conperiodos WHERE per_Aplicacion ='LI' AND per_NumPeriodo = " . $ilSemana
            ;
$rs= $db->Execute($slSqlper);
$ilPeriodo=0;
if ($rs->RecordCount() == 1) {
        $ilPeriodo = $rs->fields[0];
        if ($rs->fields[1] == -1) fErrorPage('','LA SEMANA ESTA CERRADA, NO SE PUEDE ALTERAR INFORMACION', true, false);
        }
if (!isset($ilPeriodo)  || NZ($ilPeriodo) == 0) fErrorPage('','NO SE DETERMINO EL PERIODO CONTABLE CORRESPONDIENTE A ESTA SEMANA', true, false);
// Seleccion de datos primarios
if ($ilEstadoProc ==2 )  fEliminaLiq($db, "com_Numproceso = " . $ilNumProces, "liq_Numproceso = " . $ilNumProces, "tad_LiqProceso = " . $ilNumProces);
fSelDatosProc($db, $ilNumProces, $ilProductor);
echo "<font style='font-size:14px'>";
// Secuencias de acciones según el proceso a ejecutar
//$oLog = new cBitacoraRec($db,'PR', $ilNumProces,'Ejecuta nivel ' , $ilEstadoProc);
//$oLog->fGraba();
$CondProd=($ilProductor)?" com_CodReceptor = " . $ilProductor: false; // Condicion para limitar comprobantes por productor
switch ($ilEstadoProc) {
    case 2:
        echo "PASO $ilEstadoProc.-  SELECCION DE TARJAS PARA PROCESAMIENTO: </font></td></tr><tr><td>";
        fAplicaProc($db);
        fPresentaGrid(2, $ilNumProces);
        break;
    case 3:
        $rsTarja =& fSelExplosion($db, $ilNumProces, $ilProductor);
        fDelComprobPrev($db, $ilNumProces, "'LE', 'LR', 'LC', 'LI', 'LQ', 'LN', 'LP'", $CondProd);
        echo "PASO $ilEstadoProc.-  PROCESAMIENTO DE TARJAS: </font></td></tr><tr><td>";
        if (!fProcesaTarjas($db, $rsTarja, $dlFecCierre, $ilSemana, $ilNumProces, $ilPeriodo)) $ilEstadoProc = -1;
        else fPresentaGrid(3, $ilNumProces);
        break;
    case 4:
        $rsTarja =& fSelExplosion($db, $ilNumProces, $ilProductor);
        fDelComprobPrev($db, $ilNumProces, "'LI', 'LQ', 'LN', 'LP'", $CondProd);
        echo "PASO  $ilEstadoProc.-   LIQUIDACION DE INVENTARIO:</font></td></tr><tr><td>";
        if(!fLiquidaInvent($db, $rsTarja, $dlFecCierre, $dlFecLiquid, $ilSemana, $ilNumProces, $ilPeriodo)) $ilEstadoProc = -1;
        else fPresentaGrid(4, $ilNumProces);
        break;
    case 5:
        $rsTarja =& fSelLiquidacion($db, $ilNumProces);
        fDelComprobPrev($db, $ilNumProces, "'LQ', 'IG', 'LP'", $CondProd);
        echo "PASO $ilEstadoProc.-  LIQUIDACIONES GENERADAS:</font></td></tr><tr><td>";
        if(!fLiquidaGeneral($db, $rsTarja, $dlFecCierre, $dlFecLiquid, $ilSemana, $ilNumProces, $ilPeriodo, $ilProductor)) $ilEstadoProc = -1;
        else fPresentaGrid(5, $ilNumProces);
        break;
    default:
        fErrorPage('','NO SE PUEDE APLICAR ESTE PROCESO ', true, false);
}
if ($ilEstadoProc > 0 && $ilEstadoProc <= 7) {
    $ilEstadoProc = $ilEstadoProc ;
    $qStr = "UPDATE liqprocesos SET pro_Estado = " . $ilEstadoProc  . " WHERE pro_ID = " . $ilNumProces;
    if(!$db->Execute($qStr)) fErrorPage('','NO SE ACTUALIZO EL ESTADO DEL PROCESO', true, false);
}
else   echo "<br><br><center>  NO SE APLICO ESTE PROCESO </center>";

$final = microtime();
//setlocale (LC_TIME, "es_ES");
//$txt =  "</tr><tr><td align='CENTER' style='font-size:9px'> TIEMPO UTILIZADO: " .
//        "</td></tr><tr><td>";
$db->Close();
?>
    </tr>
    <tr>
        <td align='CENTER' style='font-size:11px'>

        </td>
    </tr>
</table>
    <?
// echo $txt;
$txt .= "<br> Finalizo: " . date ("d M Y, H \h\\r\s: i \m\i\\n: s \s\e\g");
$txt .= "<br> TIEMPO UTILIZADO:      ". round(microtime_diff($inicio ,$final),2) . " segs. <br>";
echo "<center> $txt <br> PROCESAMIENTO OK </center>";
$txt.= " ." ;
    ?>
</body>
</html>

